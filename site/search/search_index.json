{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 This is the documentation of the dummynator package. Short Description \u00b6 Multi-directional dummy predictor Info about the documentation \u00b6 For full documentation visit mkdocs.org . Tests \u00b6 Equations go like this e^{i\\pi}-1=0 e^{i\\pi}-1=0 Code blocks go like this msg = \"Hello world\" print ( msg ) And you can add all kinds of cool blocks to draw attention to something, Example This is a perfect example of such an admonition block as they are called. They come in many types and their icons adapt automagically. Cf. the github source (click the edit button) to see how all of this came to be. Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome"},{"location":"#welcome","text":"This is the documentation of the dummynator package.","title":"Welcome"},{"location":"#short-description","text":"Multi-directional dummy predictor","title":"Short Description"},{"location":"#info-about-the-documentation","text":"For full documentation visit mkdocs.org .","title":"Info about the documentation"},{"location":"#tests","text":"Equations go like this e^{i\\pi}-1=0 e^{i\\pi}-1=0 Code blocks go like this msg = \"Hello world\" print ( msg ) And you can add all kinds of cool blocks to draw attention to something, Example This is a perfect example of such an admonition block as they are called. They come in many types and their icons adapt automagically. Cf. the github source (click the edit button) to see how all of this came to be.","title":"Tests"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"hello_world/","text":"Demo notebook \u00b6 In this folder, you will store your notebooks. msg = \"\"\" Hello world! \"\"\" print ( msg ) Hello world!","title":"Demo notebook"},{"location":"hello_world/#demo-notebook","text":"In this folder, you will store your notebooks. msg = \"\"\" Hello world! \"\"\" print ( msg ) Hello world!","title":"Demo notebook"},{"location":"quickstart/","text":"Quickstart \u00b6 Dummynator quickstart Preliminaries \u00b6 Imports \u00b6 import dummynator import numpy as np import pandas as pd import sklearn from sklearn.datasets import load_iris Setup \u00b6 iris = load_iris () X = iris . get ( 'data' ) y = iris . get ( 'target' ) matrix = np . c_ [ X , y ] matrix . shape (150, 5) Fit \u00b6 from dummynator import Dummynator clf = Dummynator () clf . fit ( matrix , strategy = 'prior' ) Predict \u00b6 clf . predict ( X , 4 ) arraytitle":"Quickstart"},{"location":"quickstart/#quickstart","text":"Dummynator quickstart","title":"Quickstart"},{"location":"quickstart/#preliminaries","text":"","title":"Preliminaries"},{"location":"quickstart/#imports","text":"import dummynator import numpy as np import pandas as pd import sklearn from sklearn.datasets import load_iris","title":"Imports"},{"location":"quickstart/#setup","text":"iris = load_iris () X = iris . get ( 'data' ) y = iris . get ( 'target' ) matrix = np . c_ [ X , y ] matrix . shape (150, 5)","title":"Setup"},{"location":"quickstart/#fit","text":"from dummynator import Dummynator clf = Dummynator () clf . fit ( matrix , strategy = 'prior' )","title":"Fit"},{"location":"quickstart/#predict","text":"clf . predict ( X , 4 ) arraytitle":"Predict"}]}